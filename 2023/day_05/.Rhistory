dplyr::summarise(value = mean(value, na.rm=T)) )
aggr =  subset(gas, Denominazione.Stazione %in% 'Torino - Lingotto' & particle == 'NO2' & year == 2009)
aggr
# Missing data
# fill with NA
completed = as.data.frame(aggr %>%  complete(time, hour, fill = list('particle' = input$particle, 'date' = NA, 'value' = NA), explicit = F))
completed = as.data.frame(aggr %>%  complete(time, hour, fill = list('particle' = 'NO2', 'date' = NA, 'value' = NA), explicit = F))
missing = is.na(completed$date)
completed[missing,'date'] = as.Date( paste0(completed$time[missing],'/',completed$year[missing]), format = "%m/%d/%Y")
# Does not accept anni bisestili.
completed = subset(completed, !is.na(date)) # remove giorni bisestili
plot_days_vs_hours_heatmap(completed)
completed
head(completed)
mat = completed
months = sapply(str_split(mat,'/'),'[[',1)
rowsplits = month_number_to_name(months)
rowsplits = factor(rowsplits, levels = c('Gennaio','Febbraio','Marzo','Aprile','Maggio','Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'))
mat
head(mat)
as.matrix(completed %>%  reshape2::dcast(time~hour, value.var ='value') %>%
column_to_rownames('time'))
mat = as.matrix(completed %>%  reshape2::dcast(time~hour, value.var ='value') %>%
column_to_rownames('time'))
plot_days_vs_hours_heatmap(mat)
mat
rownames(mat)
colnames(mat)
months = sapply(str_split(rownames(mat),'/'),'[[',1)
rowsplits = month_number_to_name(months)
rowsplits = factor(rowsplits, levels = c('Gennaio','Febbraio','Marzo','Aprile','Maggio','Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'))
Heatmap(mat, cluster_rows = F, cluster_columns = F,
col =ccc,
column_title = y,
split = rowsplits,
show_row_names = F,
row_title_gp = gpar(fontsize = 8),
name = 'µg/m3',
height = nrow(input)*unit(0.5,'mm'),
width = ncol(input)*unit(2,'mm'),
column_names_gp = gpar(fontsize = 6))
avg = mean(mat, na.rm=T)
maximum = max(mat, na.rm=T)
ccc = colorRamp2(c(0, avg, maximum), colors = viridis(3))
Heatmap(mat, cluster_rows = F, cluster_columns = F,
col =ccc,
column_title = y,
split = rowsplits,
show_row_names = F,
row_title_gp = gpar(fontsize = 8),
name = 'µg/m3',
height = nrow(input)*unit(0.5,'mm'),
width = ncol(input)*unit(2,'mm'),
column_names_gp = gpar(fontsize = 6))
library(viridis)
Heatmap(mat, cluster_rows = F, cluster_columns = F,
col =ccc,
column_title = y,
split = rowsplits,
show_row_names = F,
row_title_gp = gpar(fontsize = 8),
name = 'µg/m3',
height = nrow(input)*unit(0.5,'mm'),
width = ncol(input)*unit(2,'mm'),
column_names_gp = gpar(fontsize = 6))
ccc = colorRamp2(c(0, avg, maximum), colors = viridis(3))
Heatmap(mat, cluster_rows = F, cluster_columns = F,
col =ccc,
column_title = y,
split = rowsplits,
show_row_names = F,
row_title_gp = gpar(fontsize = 8),
name = 'µg/m3',
height = nrow(input)*unit(0.5,'mm'),
width = ncol(input)*unit(2,'mm'),
column_names_gp = gpar(fontsize = 6))
title=''
Heatmap(mat, cluster_rows = F, cluster_columns = F,
col =ccc,
column_title = title,
split = rowsplits,
show_row_names = F,
row_title_gp = gpar(fontsize = 8),
name = 'µg/m3',
height = nrow(input)*unit(0.5,'mm'),
width = ncol(input)*unit(2,'mm'),
column_names_gp = gpar(fontsize = 6))
Heatmap(mat, cluster_rows = F, cluster_columns = F,
col =ccc,
column_title = title,
split = rowsplits,
show_row_names = F,
row_title_gp = gpar(fontsize = 8),
name = 'µg/m3',
height = nrow(mat)*unit(0.5,'mm'),
width = ncol(mat)*unit(2,'mm'),
column_names_gp = gpar(fontsize = 6))
plot_days_vs_hours_heatmap <- function(mat, title='') {
months = sapply(str_split(rownames(mat),'/'),'[[',1)
rowsplits = month_number_to_name(months)
rowsplits = factor(rowsplits, levels = c('Gennaio','Febbraio','Marzo','Aprile','Maggio','Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'))
avg = mean(mat, na.rm=T)
maximum = max(mat, na.rm=T)
ccc = colorRamp2(c(0, avg, maximum), colors = viridis(3))
Heatmap(mat, cluster_rows = F, cluster_columns = F,
col =ccc,
column_title = title,
split = rowsplits,
show_row_names = F,
row_title_gp = gpar(fontsize = 8),
name = 'µg/m3',
height = nrow(mat)*unit(0.5,'mm'),
width = ncol(mat)*unit(2,'mm'),
column_names_gp = gpar(fontsize = 6))
}
plot_days_vs_hours_heatmap(mat)
runApp('air_quality_app')
mat
colnames(mat)
plot_days_vs_hours_heatmap <- function(mat, title='') {
months = sapply(str_split(rownames(mat),'/'),'[[',1)
rowsplits = month_number_to_name(months)
rowsplits = factor(rowsplits, levels = c('Gennaio','Febbraio','Marzo','Aprile','Maggio','Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'))
avg = mean(mat, na.rm=T)
maximum = max(mat, na.rm=T)
ccc = colorRamp2(c(0, avg, maximum), colors = viridis(3))
Heatmap(mat, cluster_rows = F, cluster_columns = F,
col =ccc,
column_title = title,
split = rowsplits,
show_row_names = F,
row_title_gp = gpar(fontsize = 8),
name = 'µg/m3',
height = nrow(mat)*unit(0.5,'mm'),
width = ncol(mat)*unit(2,'mm'),
column_names_gp = gpar(fontsize = 12))
}
plot_days_vs_hours_heatmap(mat)
Heatmap(mat, cluster_rows = F, cluster_columns = F,
col =ccc,
column_title = title,
split = rowsplits,
show_row_names = F,
row_title_gp = gpar(fontsize = 8),
name = 'µg/m3',
height = nrow(mat)*unit(0.5,'mm'),
width = ncol(mat)*unit(2,'mm'),
column_names_gp = gpar(fontsize = 8))
6
6
runApp('air_quality_app')
# MAX NO2 within a day =================
gas_aggr = readRDS('Results/GAS_dati_giornalieri.rds')
gas_aggr$time = format(gas_aggr$date,"%m/%d")
gas_aggr$month = sapply(str_split(gas_aggr$time,'/'),'[[',1)
gas_aggr$month_name = month_number_to_name(gas_aggr$month )
# years = c(2005,2006)
years = c(2021,2022)
ggplot(subset(gas_aggr, particle=='NO2' & year %in% years & Denominazione.Stazione=='Torino - Lingotto'), aes(x = time, y = max_value, color = as.factor(year), group = year))+
geom_path()+
scale_x_discrete(breaks=c(paste0('0',seq(1,9),'/01'),'10/01','11/01','12/01') )+
theme_classic()
# ~~~~~~~~~~~~ ======================
# GAS =======
# dati orari
gas = readRDS('Results/GAS_dati_orari_per_stazione.rds')
# Boxplot orari 2022 ====
to_plot = subset(gas, particle =='NO2' & year ==2022 )
to_plot$ordering = as.numeric(substr(to_plot$hour, 0,2))
to_plot$ordering = ifelse(to_plot$hour=='23:59',24, to_plot$ordering)
to_plot_se = as.data.frame(to_plot %>%  dplyr::group_by(hour, year, Denominazione.Stazione, ordering) %>%  dplyr::summarise(se = sd(value, na.rm=T)/sqrt(n()),
std = sd(value, na.rm=T),
mean_value = mean(value, na.rm=T)))
# pdf('figures/03_NO2_2022_hours.pdf', width=8, height = 4)
png(file="figures/03_NO2_2022_hours.png",width=16,height=8,units="cm",res=300)
ggplot(to_plot_se, aes(x = ordering, y = mean_value, color = Denominazione.Stazione))+
geom_line(aes(group=Denominazione.Stazione, color = Denominazione.Stazione))+
geom_point(size = 0.4, aes( color = Denominazione.Stazione))+
geom_ribbon( aes(x = ordering, ymin = mean_value - se, ymax = mean_value+se, fill =  Denominazione.Stazione), alpha=0.2)+
scale_color_simpsons()+
theme_classic()+
theme(legend.position="bottom", axis.text.x = element_text(angle=45, hjust=1), plot.title = element_text(hjust = 0.5), axis.title.x = element_blank())+
ylab('µg/m3')+
scale_x_continuous(breaks = unique(to_plot$ordering), labels = unique(to_plot$hour))+
ggtitle('Mean NO2 by hour (mean estimate across days in 2022)')+
labs(color = 'Stazione', fill='Stazione')
dev.off()
# Facet different years
to_plot = subset(gas, particle =='NO2' & year %in% 2015:2022 & Denominazione.Stazione=='Torino - Lingotto')
to_plot_se = as.data.frame(to_plot %>%  dplyr::group_by(hour, year, ordering) %>%  dplyr::summarise(se = sd(value, na.rm=T)/sqrt(n()),
std = sd(value, na.rm=T),
mean_value = mean(value, na.rm=T)))
ggplot(to_plot_se, aes(x = ordering, y = mean_value))+
geom_line(group=1, color = 'red')+
geom_point(size = 0.4, color = 'red')+
facet_grid(rows = vars(year))+
geom_ribbon( aes(x = ordering, ymin = mean_value - se, ymax = mean_value+se), fill='#e76f51', alpha=0.2)+
theme_classic()+
ggtitle('Mean NO2 by hour (mean estimate across days in 2022)')
# classi di qualità dell'aria
# https://www.arpa.veneto.it/temi-ambientali/aria/qualita-dellaria/iqa/indice-qualita-dellaria-approfondimenti
# NO2=(dx / 200) x 100
gas$label = with(gas, case_when(
value/200 <= 0.5 ~ '≤100',
value/200 > 0.5 & value/200 <= 1 ~ '101-200',
value/200 > 1 & value/200 <= 1.5 ~ '201-300',
value/200 > 1.5 & value/200 <= 2 ~ '301-400',
value/200 > 2 ~ '>400'
))
gas_hour = gas %>% dplyr::group_by(particle, hour, year) %>% dplyr::summarise(mean_value = mean(value))
p = as.matrix(subset(gas_hour, particle=='NO2') %>%  reshape2::dcast(year~hour, value.var ='mean_value') %>%  column_to_rownames('year'))
Heatmap(p, cluster_rows = F, cluster_columns = F,
height = nrow(p)*unit(4,'mm'),
width = ncol(p)*unit(4,'mm'))
color_code_gas = c('≤100'= '#007f5f', '101-200'= '#80b918','201-300'= '#ffbe0b','301-400'='#ff006e', '>400'='#8338ec')
ggplot(to_plot_se, aes(x = ordering, y = mean_value, color = Denominazione.Stazione))+
geom_line(aes(group=Denominazione.Stazione, color = Denominazione.Stazione))+
geom_point(size = 0.4, aes( color = Denominazione.Stazione))+
geom_ribbon( aes(x = ordering, ymin = mean_value - se, ymax = mean_value+se, fill =  Denominazione.Stazione), alpha=0.2)+
scale_color_simpsons()+
theme_classic()+
theme(legend.position="bottom", axis.text.x = element_text(angle=45, hjust=1), plot.title = element_text(hjust = 0.5), axis.title.x = element_blank())+
ylab('µg/m3')+
scale_x_continuous(breaks = unique(to_plot$ordering), labels = unique(to_plot$hour))+
ggtitle('Mean NO2 by hour (mean estimate across days in 2022)')+
labs(color = 'Stazione', fill='Stazione')
plot_hourly_values<-function(to_plot, title = '') {
to_plot$ordering = as.numeric(substr(to_plot$hour, 0,2))
to_plot$ordering = ifelse(to_plot$hour=='23:59',24, to_plot$ordering)
to_plot_se = as.data.frame(to_plot %>%  dplyr::group_by(hour, year, Denominazione.Stazione, ordering) %>%  dplyr::summarise(se = sd(value, na.rm=T)/sqrt(n()),
std = sd(value, na.rm=T),
mean_value = mean(value, na.rm=T)))
ggplot(to_plot_se, aes(x = ordering, y = mean_value, color = Denominazione.Stazione))+
geom_line(aes(group=Denominazione.Stazione, color = Denominazione.Stazione))+
geom_point(size = 0.4, aes( color = Denominazione.Stazione))+
geom_ribbon( aes(x = ordering, ymin = mean_value - se, ymax = mean_value+se, fill =  Denominazione.Stazione), alpha=0.2)+
scale_color_simpsons()+
theme_classic()+
theme(legend.position="bottom", axis.text.x = element_text(angle=45, hjust=1), plot.title = element_text(hjust = 0.5), axis.title.x = element_blank())+
ylab('µg/m3')+
scale_x_continuous(breaks = unique(to_plot$ordering), labels = unique(to_plot$hour))+
ggtitle(title)+
labs(color = 'Stazione', fill='Stazione')
}
plot_hourly_values(to_plot, 'Mean NO2 by hour (mean estimate across days in 2022)')
# Boxplot orari 2022 ====
to_plot = subset(gas, particle =='NO2' & year ==2022 )
plot_hourly_values(to_plot, 'Mean NO2 by hour (mean estimate across days in 2022)')
plot_hourly_values<-function(input, title = '') {
input$ordering = as.numeric(substr(input$hour, 0,2))
input$ordering = ifelse(input$hour=='23:59',24, input$ordering)
input_se = as.data.frame(input %>%  dplyr::group_by(hour, year, Denominazione.Stazione, ordering) %>%  dplyr::summarise(se = sd(value, na.rm=T)/sqrt(n()),
std = sd(value, na.rm=T),
mean_value = mean(value, na.rm=T)))
ggplot(input_se, aes(x = ordering, y = mean_value, color = Denominazione.Stazione))+
geom_line(aes(group=Denominazione.Stazione, color = Denominazione.Stazione))+
geom_point(size = 0.4, aes( color = Denominazione.Stazione))+
geom_ribbon( aes(x = ordering, ymin = mean_value - se, ymax = mean_value+se, fill =  Denominazione.Stazione), alpha=0.2)+
scale_color_simpsons()+
theme_classic()+
theme(legend.position="bottom", axis.text.x = element_text(angle=45, hjust=1), plot.title = element_text(hjust = 0.5), axis.title.x = element_blank())+
ylab('µg/m3')+
scale_x_continuous(breaks = unique(to_plot$ordering), labels = unique(to_plot$hour))+
ggtitle(title)+
labs(color = 'Stazione', fill='Stazione')
}
aggr = subset(gas, Denominazione.Stazione %in% input$stazione & particle ==input$particle & year == input$year)
runApp('air_quality_app')
aggr
plot_hourly_values(aggr,  input$year)
plot_hourly_values(aggr)
runApp('air_quality_app')
head(aggr)
runApp('air_quality_app')
input = input
input = aggr
input$ordering = as.numeric(substr(input$hour, 0,2))
input$ordering = ifelse(input$hour=='23:59',24, input$ordering)
input_se = as.data.frame(input %>%  dplyr::group_by(hour, year, Denominazione.Stazione, ordering) %>%  dplyr::summarise(se = sd(value, na.rm=T)/sqrt(n()),
std = sd(value, na.rm=T),
mean_value = mean(value, na.rm=T)))
ggplot(input_se, aes(x = ordering, y = mean_value, color = Denominazione.Stazione))+
geom_line(aes(group=Denominazione.Stazione, color = Denominazione.Stazione))+
geom_point(size = 0.4, aes( color = Denominazione.Stazione))+
geom_ribbon( aes(x = ordering, ymin = mean_value - se, ymax = mean_value+se, fill =  Denominazione.Stazione), alpha=0.2)+
scale_color_simpsons()+
theme_classic()+
theme(legend.position="bottom", axis.text.x = element_text(angle=45, hjust=1), plot.title = element_text(hjust = 0.5), axis.title.x = element_blank())+
ylab('µg/m3')+
scale_x_continuous(breaks = unique(to_plot$ordering), labels = unique(to_plot$hour))+
ggtitle(title)+
labs(color = 'Stazione', fill='Stazione')
input_se
plot_hourly_values(aggr,'')
runApp('air_quality_app')
runApp('air_quality_app')
head(gas)
runApp('air_quality_app')
378/15
80*12
33000/4
36000/4
require(ggplot2)
require(data.table)
library(stringr)
dati = '~/Desktop/dati_codici/air_quality/'
setwd('~/Desktop/coding_shit/air_quality/')
# PARTICOLATO ==========================
files = list.files(paste0(dati, 'particolato/'))
df = data.frame()
for ( f in files) {
tmp = read.delim2(paste0(dati, 'particolato/',f), sep = ';', row.names=NULL)
colnames(tmp) = colnames(tmp)[2:ncol(tmp)]
tmp$year = unlist(strsplit(f, '_|-'))[5]
tmp$file = f
df = rbind(df, tmp)
}
df$date = as.Date(df$Data.rilevamento, format = "%d/%m/%Y")
df$value = as.numeric(df$Valore)
df = subset(df, value !='' | !is.na(value))
colnames(df)[colnames(df)=='Data rilevamento']='date'
df[,'particle']=sapply(str_split(df[,'Descr..Parametro'],' '),'[[',1)
# keep only PM10
df = subset(df, particle=='PM10')
df$time = format(df$date,"%m/%d")
# keep only station with data from 2004 to 2022
df = subset(df, Denominazione.Stazione %in% c('Torino - Consolata', 'Torino - Lingotto'))
head(df)
subset(df, Denominazione.Stazione%like%'Consolata')
subset(df, Denominazione.Stazione%like%'Consolata')$year
max(as.numeric(subset(df, Denominazione.Stazione%like%'Consolata')$year))
202350
2023-50
setwd('/Users/francesca/Desktop/coding_shit/advent_of_code/2023/')
read.delim('day_02_test.txt')
read.delim('day_02_test.txt',':')
read.delim('day_02_test.txt',':', header=F)
df = read.delim('day_02_test.txt',':', header=F)
df
setwd('~/Desktop/coding_shit/advent_of_code/2023/day_05/')
seeds = read.delim2('seeds.csv')
df = read.delim2('all.csv')
seeds = read.delim2('seeds.csv')
df
df = read.delim2('all.csv', sep = ',', ehader=T)
seeds = read.delim2('seeds.csv', sep = ',', header=T)
df = read.delim2('all.csv', sep = ',', header=T)
seeds = read.delim2('seeds.csv', sep = ',', header=T)
df
df = read.delim2('all.csv', sep = ',', header=T, row.names = F)
df = read.delim2('all.csv', sep = ',', header=T, row.names = F)
df = read.delim2('all.csv', sep = ',', header=T, row.names = 0)
df = read.delim2('all.csv', sep = ',', header=T)
df
df = read.delim2('all.csv', sep = ',', header=T)[1:6]
df
df = read.delim2('all.csv', sep = ',', header=T)[,1:6]
df
df[,2:3]
df = read.delim2('all.csv', sep = ',', header=T)[,2:6]
df
seeds = read.delim2('seeds.csv', sep = ',', header=T)[,2:3]
seeds
df = read.delim2('all.csv', sep = ',', header=T)[,2:7]
seeds = read.delim2('seeds.csv', sep = ',', header=T)[,2:3]
library(GRanges)
library(Granges)
library(GenomicRanges)
GRanges(seqnames=1, ranges=IRanges(df$source_start, df$source_end))
seeds_gr = GRanges(seqnames=1, ranges=IRanges(seeds$start, seeds$end))
seeds
seeds_gr
Hits(df_gr, seeds_gr)
df_gr = GRanges(seqnames=1, ranges=IRanges(df$source_start, df$source_end))
seeds_gr = GRanges(seqnames=1, ranges=IRanges(seeds$start, seeds$end))
Hits(df_gr, seeds_gr)
df_gr = GRanges(seqnames='1', ranges=IRanges(df$source_start, df$source_end))
seeds_gr = GRanges(seqnames='1', ranges=IRanges(seeds$start, seeds$end))
Hits(df_gr, seeds_gr)
df$source_start
df$source_end
seeds$start
seeds$end
Hits(df_gr, seeds_gr)
HitsList(df_gr, seeds_gr)
findOverlaps(df_gr, seeds_gr)
hits = findOverlaps(df_gr, seeds_gr)
df_gr[query(hits)]
query(hits)
queryHits(hits)
df_gr[queryHits(hits),]
seeds_gr[subjectHits(hits)]
IRanges(df_gr[queryHits(hits)])
ranges(df_gr[queryHits(hits)])
psetdiff(seeds_gr, df_gr)
seeds_gr
df_gr
IRanges(df_gr[queryHits(hits)])
df_gr[queryHits(hits)]
seeds_gr[subjectHits(hits)]
x = df_gr[queryHits(hits)]
y = seeds_gr[subjectHits(hits)]
len(x)
length(x)
length(y)
length(df_Gr)
length(df_gr)
seeds_gr
df_gr
psetdiff(seeds_gr, df_gr)
setdiff(seeds_gr, df_gr)
union(df_gr,seed_gr)
union(df_gr,seeds_gr)
df_gr
setdiff(union(df_gr,seeds_gr), df_gr)
setdiff(union(df_gr,seeds_gr), seeds_gr[subjectHits(hits)])
seeds_gr[subjectHits(hits)]
df
seeds[subjectHits(hits)]
y = seeds[subjectHits(hits),]
y
hits
df_gr[17:18]
seeds_gr[1]
df_gr = GRanges(seqnames='1', ranges=IRanges(df$source_start, df$source_end-1))
seeds_gr = GRanges(seqnames='1', ranges=IRanges(seeds$start, seeds$end-1))
hits = findOverlaps(df_gr, seeds_gr)
x = df[queryHits(hits)]
x = df[queryHits(hits),]
x
y = seeds[subjectHits(hits),]
y
hits
df_gr[17]
seeds_gr[1:2]
seeds
# hits = findOverlaps(df_gr, seeds_gr)
# x = df[queryHits(hits),]
# y = seeds[subjectHits(hits),]
pintersect(df_gr, seeds_gr)
# hits = findOverlaps(df_gr, seeds_gr)
# x = df[queryHits(hits),]
# y = seeds[subjectHits(hits),]
intersect(df_gr, seeds_gr)
df_gr
df
seeds
# hits = findOverlaps(df_gr, seeds_gr)
# x = df[queryHits(hits),]
# y = seeds[subjectHits(hits),]
intersect(df_gr, seeds_gr)
# hits = findOverlaps(df_gr, seeds_gr)
# x = df[queryHits(hits),]
# y = seeds[subjectHits(hits),]
intersect(df_gr, seeds_gr)
# hits = findOverlaps(df_gr, seeds_gr)
# x = df[queryHits(hits),]
# y = seeds[subjectHits(hits),]
common = intersect(df_gr, seeds_gr)
setdiff(union(df_gr,seeds_gr), common)
setdiff(seeds_gr, common)
seeds_gr
df_gr
df
head(df)
head(df_gr)
df_gr = GRanges(seqnames='1', ranges=IRanges(df$source_start, df$source_end))
seeds_gr = GRanges(seqnames='1', ranges=IRanges(seeds$start, seeds$end))
head(df_gr)
head(df)
# hits = findOverlaps(df_gr, seeds_gr)
# x = df[queryHits(hits),]
# y = seeds[subjectHits(hits),]
common = intersect(df_gr, seeds_gr)
common
df_gr
not_found = setdiff(seeds_gr, common)
common = intersect(tmp_df, seeds_gr)
# hits = findOverlaps(df_gr, seeds_gr)
# x = df[queryHits(hits),]
# y = seeds[subjectHits(hits),]
for (s in c('seed','soil','fertilizer','water','light','temperature','humidity')) {
tmp_df = subset(df, source_label==s)
df_gr = GRanges(seqnames='1', ranges=IRanges(tmp_df$source_start, tmp_df$source_end))
common = intersect(tmp_df, seeds_gr)
not_found = setdiff(seeds_gr, common)
}
s
subset(df, source_label==s)
tmp_df = subset(df, source_label==s)
df_gr = GRanges(seqnames='1', ranges=IRanges(tmp_df$source_start, tmp_df$source_end))
common = intersect(tmp_df, seeds_gr)
common = intersect(df_gr, seeds_gr)
common
common = intersect(df_gr, seeds_gr)
common
tmp_df
hits = findOverlaps(df_gr, seeds_gr)
hits
query(hits)
queryHits(hits)
# hits = findOverlaps(df_gr, seeds_gr)
# queryHits(hits)
common = intersect(df_gr, seeds_gr)
common
hits = findOverlaps(df_gr, common)
hits
queryHits(hits)
df[queryHits(hits),]
common
findOverlaps(df_gr, seeds_gr)
findOverlaps(df_gr, seeds_gr)
